package io.github.netbeans.mvnrunner;

import java.util.Properties;
import java.util.function.Consumer;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.table.TableModel;
import javax.swing.tree.TreeSelectionModel;

import org.netbeans.api.annotations.common.StaticResource;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.swing.etable.ETable;
import org.netbeans.swing.outline.Outline;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

import lombok.SneakyThrows;

import io.github.netbeans.mvnrunner.node.ProjectNode;
import io.github.netbeans.mvnrunner.node.ProjectRootChildren;
import io.github.netbeans.mvnrunner.util.ActionUtils;

/**
 * The Maven-Runner {@link TopComponent}.
 */
// @formatter:off
@ConvertAsProperties(dtd = "-//io.github.netbeans.mvnrunner//MavenRunnerTopComponent//EN")
@TopComponent.Description(preferredID = "MavenRunnerTopComponent",
        iconBase = "io/github/netbeans/mvnrunner/resources/Maven2IconRun1.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties",
        openAtStartup = true)
@ActionID(category = "Window",
        id = "io.github.netbeans.mvnrunner.MavenRunnerTopComponent")
@ActionReference(path = "Menu/Window", position = 100)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MavenRunnerTopComponentAction",
        preferredID = "MavenRunnerTopComponent")
@Messages({ "CTL_MavenRunnerTopComponentAction=Maven Runner",
        "CTL_MavenRunnerTopComponent=Maven Runner",
        "HINT_MavenRunnerTopComponent=Shows Maven goals as tree",
        "LB_ExpandAll=Expand all",
        "LB_CollapseAll=Collapse all" })
// @formatter:on
public final class MavenRunnerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static final long serialVersionUID = 1L;

    public MavenRunnerTopComponent() {
        initComponents();
        setName(Bundle.CTL_MavenRunnerTopComponent());
        setToolTipText(Bundle.HINT_MavenRunnerTopComponent());
        initCustomization();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        scollPane = new OutlineView();

        setLayout(new java.awt.BorderLayout());

        toolbar.setRollover(true);
        add(toolbar, java.awt.BorderLayout.PAGE_START);
        add(scollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scollPane;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
    private OutlineView treeView;
    private transient Node rootNode;
    private transient Properties properties = new Properties();
    private final transient ExplorerManager explorerManager = new ExplorerManager();

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    private static final @StaticResource String EXPAND_ALL_ICON
            = "io/github/netbeans/mvnrunner/resources/tree_expand.png"; // NOI18N
    private static final @StaticResource String COLLAPSE_ALL_ICON
            = "io/github/netbeans/mvnrunner/resources/tree_collapse.png"; // NOI18N
    private static final @StaticResource String REFRESH_ICON = "io/github/netbeans/mvnrunner/resources/refresh.png"; // NOI18N
    private static final @StaticResource String RUN_ICON = "io/github/netbeans/mvnrunner/resources/runProject.png"; // NOI18N
    private static final @StaticResource String DEBUG_ICON = "io/github/netbeans/mvnrunner/resources/debugProject.png"; // NOI18N
    private static final @StaticResource String BUILD_ICON = "io/github/netbeans/mvnrunner/resources/buildProject.png"; // NOI18N
    private static final @StaticResource String REBUILD_ICON
            = "io/github/netbeans/mvnrunner/resources/rebuildProject.png"; // NOI18N

    private void initCustomization() {
        treeView = (OutlineView) this.scollPane;
        Outline outline = treeView.getOutline();
        outline.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        outline.setTableHeader(null);
        TableModel model = outline.getModel();
        // Receive changed selctions
        model.addTableModelListener(this::handleTableModelChanges);
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        rootNode = createRootNode();
        invokeInAwtThreadLater(() -> {
            outline.setRootVisible(false);
            explorerManager.setRootContext(rootNode);
            explorerManager.getRootContext().setDisplayName("Maven-Runner-Projects");
        });
        JButton expandAllBtn = new JButton(ImageUtilities.loadImageIcon(EXPAND_ALL_ICON, true));
        expandAllBtn.setToolTipText(Bundle.LB_ExpandAll());
        expandAllBtn.addActionListener(ev -> {
            SwingUtilities.invokeLater(() -> {
                walkTree(rootNode, treeView::expandNode);
            });
        });
        JButton collapseAllBtn = new JButton(ImageUtilities.loadImageIcon(COLLAPSE_ALL_ICON, true));
        collapseAllBtn.setToolTipText(Bundle.LB_CollapseAll());
        collapseAllBtn.addActionListener(ev -> {
            invokeInAwtThreadLater(() -> {
                walkTree(rootNode.getChildren(), treeView::collapseNode);
            });
        });
        JButton refreshBtn = new JButton(ImageUtilities.loadImageIcon(REFRESH_ICON, true));
        refreshBtn.setToolTipText("Refresh Tree");
        refreshBtn.addActionListener(ev -> {
            Node n = createRootNode();
            invokeInAwtThreadLater(() -> {
                explorerManager.setRootContext(n);
            });
        });
        JButton runBtn = new JButton(ImageUtilities.loadImageIcon(RUN_ICON, true));
        runBtn.setToolTipText("Run Project");
        runBtn.setEnabled(false);

        JButton debugBtn = new JButton(ImageUtilities.loadImageIcon(DEBUG_ICON, true));
        debugBtn.setToolTipText("Debug Project");
        debugBtn.setEnabled(false);

        JButton buildBtn = new JButton(ImageUtilities.loadImageIcon(BUILD_ICON, true));
        buildBtn.setToolTipText("Build Project");
        buildBtn.setEnabled(false); // build

        JButton rebuildBtn = new JButton(ImageUtilities.loadImageIcon(REBUILD_ICON, true));
        rebuildBtn.setToolTipText("Clean and Build Project");
        rebuildBtn.setEnabled(false); // build

        outline.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            int row = outline.getSelectedRow();
            ETable.RowMapping mapping = new ETable.RowMapping(row, outline.getModel(), outline);
            Node node = (Node) mapping.getTransformedValue(0);
            while (node != null) {
                if ((node instanceof ProjectNode)) {
                    ProjectNode pn = (ProjectNode) node;

                    runBtn.setEnabled(true);
                    Action action = ActionUtils.createProjectRunAction(pn);
                    runBtn.setAction(action);
                    runBtn.setToolTipText("Run Project (" + pn.getDisplayName() + ")");

                    debugBtn.setEnabled(true);
                    Action debugAction = ActionUtils.createProjectDebugAction(pn);
                    debugBtn.setAction(debugAction);
                    debugBtn.setToolTipText("Debug Project (" + pn.getDisplayName() + ")");

                    buildBtn.setEnabled(true);
                    Action buildAction = ActionUtils.createProjectBuildAction(pn);
                    buildBtn.setAction(buildAction);
                    buildBtn.setToolTipText("Build Project (" + pn.getDisplayName() + ")");

                    rebuildBtn.setEnabled(true);
                    Action rebuildAction = ActionUtils.createProjectRebuildAction(pn);
                    rebuildBtn.setAction(rebuildAction);
                    rebuildBtn.setToolTipText("Clean and Build Project (" + pn.getDisplayName() + ")");
                    break;

                }
                node = node.getParentNode();
            }
            if (node == null) {
                runBtn.setAction(null);
                runBtn.setEnabled(false);
            }
            runBtn.updateUI();
        });
        toolbar.setLayout(new BoxLayout(toolbar, BoxLayout.X_AXIS));
        toolbar.add(refreshBtn);
        toolbar.add(runBtn);
        toolbar.add(debugBtn);
        toolbar.add(Box.createHorizontalStrut(12));
        toolbar.add(buildBtn);
        toolbar.add(rebuildBtn);
        toolbar.add(Box.createHorizontalGlue());
        toolbar.add(expandAllBtn);
        toolbar.add(collapseAllBtn);
    }

    private Node createRootNode() {
        AbstractNode n = new AbstractNode(new ProjectRootChildren(true));
        n.setDisplayName("Projects");
        n.setName("Project-Name");
        return n;
    }

    private void walkTree(Node node, Consumer<Node> consumer) {
        consumer.accept(node);
        Children children = node.getChildren();
        for (Node child : children.getNodes()) {
            walkTree(child, consumer);
        }
    }

    private void walkTree(Children nodes, Consumer<Node> consumer) {
        for (Node node : nodes.getNodes()) {
            walkTree(node, consumer);
        }
    }

    private void handleTableModelChanges(TableModelEvent event) {
        Outline outline = treeView.getOutline();
        if (event.getFirstRow() == TableModelEvent.HEADER_ROW && event.getLastRow() == TableModelEvent.HEADER_ROW) {
            return;
        }
        if (event.getType() != TableModelEvent.INSERT) {
            return;
        }
        int firstRow = Math.max(event.getFirstRow(), 0);
        int lastRow = (event.getLastRow() == TableModelEvent.HEADER_ROW) ? 0 : event.getLastRow();
        for (int i = firstRow; i <= lastRow; i++) {
            ETable.RowMapping mapping = new ETable.RowMapping(i, outline.getModel(), outline);
            Node node = (Node) mapping.getTransformedValue(0);
            if (node == null) {
                continue;
            }
            String property = properties.getProperty("expand:" + getTreePathHash(node), "false");
            if (Boolean.parseBoolean(property)) {
                invokeInAwtThreadLater(() -> {
                    treeView.expandNode(node);
                });
            }
            // We need it only once
            properties.remove("expand:" + getTreePathHash(node));
        }
    }

    @SneakyThrows
    private void invokeInAwtThreadAndWait(Runnable runnable) {
        if (SwingUtilities.isEventDispatchThread()) {
            runnable.run();
        } else {
            SwingUtilities.invokeAndWait(runnable);
        }
    }

    private void invokeInAwtThreadLater(Runnable runnable) {
        if (SwingUtilities.isEventDispatchThread()) {
            runnable.run();
        } else {
            SwingUtilities.invokeLater(runnable);
        }
    }

    @SneakyThrows
    @SuppressWarnings("unused")
    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
        walkTree(rootNode, node -> {
            if (node == null) {
                return;
            }
            invokeInAwtThreadAndWait(() -> {
                p.setProperty("expand:" + getTreePathHash(node), Boolean.toString(treeView.isExpanded(node)));
            });
        });
    }

    private String getTreePathHash(Node node) {
        StringBuilder result = new StringBuilder(8192);
        do {
            result.append(node.getName());
            result.append(" / ");
        } while ((node = node.getParentNode()) != null);
        return result.toString();
    }

    @SuppressWarnings("unused")
    void readProperties(java.util.Properties p) {
        properties = p;
        String version = p.getProperty("version");
        walkTree(rootNode, node -> {
            String property = p.getProperty("expand:" + getTreePathHash(node), "false");
            if (Boolean.parseBoolean(property)) {
                treeView.expandNode(node);
            }
        });
    }
}
